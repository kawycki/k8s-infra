// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Code generated by k8s-infra-gen. DO NOT EDIT.
package v20200101

import "encoding/json"

type Test struct {

	//Bar: mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	//Baz: mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	//Foo: mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because Test represents a discriminated union (JSON OneOf)
func (test Test) MarshalJSON() ([]byte, error) {
	if test.Bar != nil {
		return json.Marshal(test.Bar)
	}
	if test.Baz != nil {
		return json.Marshal(test.Baz)
	}
	if test.Foo != nil {
		return json.Marshal(test.Foo)
	}
	return nil, nil
}

type Bar struct {

	// +kubebuilder:validation:Required
	Size int `json:"size"`
}

type Baz struct {

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled"`
}

type Foo struct {
	Name *string `json:"name,omitempty"`
}
